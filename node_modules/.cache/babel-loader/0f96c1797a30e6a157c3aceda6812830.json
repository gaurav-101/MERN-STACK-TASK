{"ast":null,"code":"// import jsPDF from \"jspdf\";\n// import * as htmlToImage from \"html-to-image\";\n// export async function exportMultipleChartsToPdf() {\n//   const doc = new jsPDF(\"p\", \"px\");\n//   const elements = document.getElementsByClassName(\"custom-chart\");\n//   await creatPdf({ doc, elements });\n//   doc.save(`charts.pdf`);\n// }\n// async function creatPdf({\n//   doc,\n//   elements,\n// }: {\n//   doc: jsPDF;\n//   elements: HTMLCollectionOf<Element>;\n// }) {\n//   const padding = 10;\n//   const marginTop = 20;\n//   let top = marginTop;\n//   for (let i = 0; i < elements.length; i++) {\n//     const el = elements.item(i) as HTMLElement;\n//     const imgData = await htmlToImage.toPng(el);\n//     let elHeight = el.offsetHeight;\n//     let elWidth = el.offsetWidth;\n//     const pageWidth = doc.internal.pageSize.getWidth();\n//     if (elWidth > pageWidth) {\n//       const ratio = pageWidth / elWidth;\n//       elHeight = elHeight * ratio - padding * 2;\n//       elWidth = elWidth * ratio - padding * 2;\n//     }\n//     const pageHeight = doc.internal.pageSize.getHeight();\n//     if (top + elHeight > pageHeight) {\n//       doc.addPage();\n//       top = marginTop;\n//     }\n//     doc.addImage(imgData, \"PNG\", padding, top, elWidth, elHeight, `image${i}`);\n//     top += elHeight + marginTop;\n//   }\n// }\n// import jsPDF from \"jspdf\";\n// import * as htmlToImage from \"html-to-image\";\n// export async function exportCrimeDataToPdf() {\n//   const doc = new jsPDF(\"p\", \"px\");\n//   const crimeDataElement = document.getElementById(\"crimeData\"); // Add an id to your CrimeData component div\n//   if (crimeDataElement) {\n//     const imgData = await htmlToImage.toPng(crimeDataElement);\n//     let elHeight = crimeDataElement.offsetHeight;\n//     let elWidth = crimeDataElement.offsetWidth;\n//     const pageWidth = doc.internal.pageSize.getWidth();\n//     if (elWidth > pageWidth) {\n//       const ratio = pageWidth / elWidth;\n//       elHeight = elHeight * ratio;\n//       elWidth = elWidth * ratio;\n//     }\n//     doc.addImage(imgData, \"PNG\", 10, 10, elWidth, elHeight);\n//     doc.save(\"crime_data.pdf\");\n//   }\n// }\nimport jsPDF from \"jspdf\";\nimport * as htmlToImage from \"html-to-image\";\n\nasync function createPdf(_ref) {\n  let {\n    doc,\n    elements\n  } = _ref;\n  const padding = 10;\n  const marginTop = 20;\n  let top = marginTop;\n  let currentPage = 1;\n\n  for (let i = 0; i < elements.length; i++) {\n    const el = elements.item(i);\n    const imgData = await htmlToImage.toPng(el);\n    let elHeight = el.offsetHeight;\n    let elWidth = el.offsetWidth;\n    const pageWidth = doc.internal.pageSize.getWidth();\n    const pageHeight = doc.internal.pageSize.getHeight();\n\n    if (elWidth > pageWidth) {\n      const ratio = pageWidth / elWidth;\n      elHeight = elHeight * ratio;\n      elWidth = elWidth * ratio;\n    }\n\n    if (top + elHeight > pageHeight) {\n      doc.addPage();\n      currentPage++;\n      top = marginTop;\n    }\n\n    doc.addImage(imgData, \"PNG\", padding, top, elWidth, elHeight, `image${i}`);\n    top += elHeight + marginTop;\n  }\n\n  return currentPage;\n}\n\nexport async function exportCrimeDataToPdf() {\n  const doc = new jsPDF(\"p\", \"px\");\n  const elements = document.getElementById(\"crimeData\");\n  let currentPage = 1;\n\n  while (currentPage <= elements.length) {\n    if (currentPage > 1) {\n      doc.addPage();\n    }\n\n    currentPage = await createPdf({\n      doc,\n      elements\n    });\n\n    if (currentPage > 1) {\n      doc.setPage(currentPage);\n    }\n  }\n\n  doc.save(\"crime_data.pdf\");\n}","map":{"version":3,"sources":["/Users/gaurav/Downloads/aaaaaa/src/utils.ts"],"names":["jsPDF","htmlToImage","createPdf","doc","elements","padding","marginTop","top","currentPage","i","length","el","item","imgData","toPng","elHeight","offsetHeight","elWidth","offsetWidth","pageWidth","internal","pageSize","getWidth","pageHeight","getHeight","ratio","addPage","addImage","exportCrimeDataToPdf","document","getElementById","setPage","save"],"mappings":"AAAA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAKA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B;;AAEA,eAAeC,SAAf,OAA4C;AAAA,MAAnB;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,GAAmB;AAC1C,QAAMC,OAAO,GAAG,EAAhB;AACA,QAAMC,SAAS,GAAG,EAAlB;AACA,MAAIC,GAAG,GAAGD,SAAV;AACA,MAAIE,WAAW,GAAG,CAAlB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,QAAQ,CAACM,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,UAAME,EAAE,GAAGP,QAAQ,CAACQ,IAAT,CAAcH,CAAd,CAAX;AACA,UAAMI,OAAO,GAAG,MAAMZ,WAAW,CAACa,KAAZ,CAAkBH,EAAlB,CAAtB;AAEA,QAAII,QAAQ,GAAGJ,EAAE,CAACK,YAAlB;AACA,QAAIC,OAAO,GAAGN,EAAE,CAACO,WAAjB;AAEA,UAAMC,SAAS,GAAGhB,GAAG,CAACiB,QAAJ,CAAaC,QAAb,CAAsBC,QAAtB,EAAlB;AACA,UAAMC,UAAU,GAAGpB,GAAG,CAACiB,QAAJ,CAAaC,QAAb,CAAsBG,SAAtB,EAAnB;;AAEA,QAAIP,OAAO,GAAGE,SAAd,EAAyB;AACvB,YAAMM,KAAK,GAAGN,SAAS,GAAGF,OAA1B;AACAF,MAAAA,QAAQ,GAAGA,QAAQ,GAAGU,KAAtB;AACAR,MAAAA,OAAO,GAAGA,OAAO,GAAGQ,KAApB;AACD;;AAED,QAAIlB,GAAG,GAAGQ,QAAN,GAAiBQ,UAArB,EAAiC;AAC/BpB,MAAAA,GAAG,CAACuB,OAAJ;AACAlB,MAAAA,WAAW;AACXD,MAAAA,GAAG,GAAGD,SAAN;AACD;;AAEDH,IAAAA,GAAG,CAACwB,QAAJ,CAAad,OAAb,EAAsB,KAAtB,EAA6BR,OAA7B,EAAsCE,GAAtC,EAA2CU,OAA3C,EAAoDF,QAApD,EAA+D,QAAON,CAAE,EAAxE;AAEAF,IAAAA,GAAG,IAAIQ,QAAQ,GAAGT,SAAlB;AACD;;AAED,SAAOE,WAAP;AACD;;AAED,OAAO,eAAeoB,oBAAf,GAAsC;AAC3C,QAAMzB,GAAG,GAAG,IAAIH,KAAJ,CAAU,GAAV,EAAe,IAAf,CAAZ;AAEA,QAAMI,QAAQ,GAAGyB,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAjB;AACA,MAAItB,WAAW,GAAG,CAAlB;;AAEA,SAAOA,WAAW,IAAIJ,QAAQ,CAACM,MAA/B,EAAuC;AACrC,QAAIF,WAAW,GAAG,CAAlB,EAAqB;AACnBL,MAAAA,GAAG,CAACuB,OAAJ;AACD;;AAEDlB,IAAAA,WAAW,GAAG,MAAMN,SAAS,CAAC;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,KAAD,CAA7B;;AAEA,QAAII,WAAW,GAAG,CAAlB,EAAqB;AACnBL,MAAAA,GAAG,CAAC4B,OAAJ,CAAYvB,WAAZ;AACD;AACF;;AAEDL,EAAAA,GAAG,CAAC6B,IAAJ,CAAS,gBAAT;AACD","sourcesContent":["// import jsPDF from \"jspdf\";\n// import * as htmlToImage from \"html-to-image\";\n\n// export async function exportMultipleChartsToPdf() {\n//   const doc = new jsPDF(\"p\", \"px\");\n\n//   const elements = document.getElementsByClassName(\"custom-chart\");\n\n//   await creatPdf({ doc, elements });\n\n//   doc.save(`charts.pdf`);\n// }\n\n// async function creatPdf({\n//   doc,\n//   elements,\n// }: {\n//   doc: jsPDF;\n//   elements: HTMLCollectionOf<Element>;\n// }) {\n//   const padding = 10;\n//   const marginTop = 20;\n//   let top = marginTop;\n  \n\n//   for (let i = 0; i < elements.length; i++) {\n//     const el = elements.item(i) as HTMLElement;\n//     const imgData = await htmlToImage.toPng(el);\n\n//     let elHeight = el.offsetHeight;\n//     let elWidth = el.offsetWidth;\n\n//     const pageWidth = doc.internal.pageSize.getWidth();\n\n//     if (elWidth > pageWidth) {\n//       const ratio = pageWidth / elWidth;\n//       elHeight = elHeight * ratio - padding * 2;\n//       elWidth = elWidth * ratio - padding * 2;\n//     }\n\n//     const pageHeight = doc.internal.pageSize.getHeight();\n\n//     if (top + elHeight > pageHeight) {\n//       doc.addPage();\n//       top = marginTop;\n//     }\n\n//     doc.addImage(imgData, \"PNG\", padding, top, elWidth, elHeight, `image${i}`);\n//     top += elHeight + marginTop;\n//   }\n// }\n\n\n\n// import jsPDF from \"jspdf\";\n// import * as htmlToImage from \"html-to-image\";\n\n// export async function exportCrimeDataToPdf() {\n//   const doc = new jsPDF(\"p\", \"px\");\n\n//   const crimeDataElement = document.getElementById(\"crimeData\"); // Add an id to your CrimeData component div\n\n//   if (crimeDataElement) {\n//     const imgData = await htmlToImage.toPng(crimeDataElement);\n\n//     let elHeight = crimeDataElement.offsetHeight;\n//     let elWidth = crimeDataElement.offsetWidth;\n\n//     const pageWidth = doc.internal.pageSize.getWidth();\n\n//     if (elWidth > pageWidth) {\n//       const ratio = pageWidth / elWidth;\n//       elHeight = elHeight * ratio;\n//       elWidth = elWidth * ratio;\n//     }\n\n//     doc.addImage(imgData, \"PNG\", 10, 10, elWidth, elHeight);\n\n//     doc.save(\"crime_data.pdf\");\n//   }\n// }\n\n\n\n\nimport jsPDF from \"jspdf\";\nimport * as htmlToImage from \"html-to-image\";\n\nasync function createPdf({ doc, elements }) {\n  const padding = 10;\n  const marginTop = 20;\n  let top = marginTop;\n  let currentPage = 1;\n\n  for (let i = 0; i < elements.length; i++) {\n    const el = elements.item(i) as HTMLElement;\n    const imgData = await htmlToImage.toPng(el);\n\n    let elHeight = el.offsetHeight;\n    let elWidth = el.offsetWidth;\n\n    const pageWidth = doc.internal.pageSize.getWidth();\n    const pageHeight = doc.internal.pageSize.getHeight();\n\n    if (elWidth > pageWidth) {\n      const ratio = pageWidth / elWidth;\n      elHeight = elHeight * ratio;\n      elWidth = elWidth * ratio;\n    }\n\n    if (top + elHeight > pageHeight) {\n      doc.addPage();\n      currentPage++;\n      top = marginTop;\n    }\n\n    doc.addImage(imgData, \"PNG\", padding, top, elWidth, elHeight, `image${i}`);\n\n    top += elHeight + marginTop;\n  }\n\n  return currentPage;\n}\n\nexport async function exportCrimeDataToPdf() {\n  const doc = new jsPDF(\"p\", \"px\");\n\n  const elements = document.getElementById(\"crimeData\");\n  let currentPage = 1;\n\n  while (currentPage <= elements.length) {\n    if (currentPage > 1) {\n      doc.addPage();\n    }\n\n    currentPage = await createPdf({ doc, elements });\n\n    if (currentPage > 1) {\n      doc.setPage(currentPage);\n    }\n  }\n\n  doc.save(\"crime_data.pdf\");\n}\n"]},"metadata":{},"sourceType":"module"}