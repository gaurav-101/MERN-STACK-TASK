{"ast":null,"code":"import jsPDF from \"jspdf\";\nimport * as htmlToImage from \"html-to-image\";\nimport html2canvas from \"html2canvas\";\nexport async function exportCrimeDataToPdf() {\n  const doc = new jsPDF(\"p\", \"px\");\n  const pageWidth = doc.internal.pageSize.getWidth();\n  const pageHeight = doc.internal.pageSize.getHeight();\n  const padding = 10; // Adjust padding as needed\n\n  const graphWidth = pageWidth - 10 * padding; // Four graphs in a row\n\n  const graphHeight = (pageHeight - 6 * padding) / 4; // Set the desired height for each graph\n\n  const elements = document.getElementsByClassName(\"custom-chart\");\n\n  const addHtmlToPdf = async (html, x, y, width, height) => {\n    const canvas = await html2canvas(html);\n    const imgData = canvas.toDataURL(\"image/png\");\n    doc.addImage(imgData, \"PNG\", x, y, width, height);\n  };\n\n  for (let i = 0; i < elements.length; i) {\n    // doc.addPage(); // Add a new page for every four graphs\n    // Load external header HTML file\n    const headerHtml = await fetch(\"header.html\").then(response => response.text()).then(htmlContent => {\n      const headerElement = document.createElement(\"div\");\n      headerElement.innerHTML = htmlContent;\n      return headerElement;\n    });\n    let x = padding;\n    let y = padding;\n    let headerHeight = 3 * padding; // Add Header\n\n    await addHtmlToPdf(headerHtml, x, y, graphWidth, headerHeight);\n\n    for (let j = 0; j < 4 && j + i < elements.length; j++, i++) {\n      const el = elements[i];\n      const imgData = await htmlToImage.toPng(el);\n      const x = 5 * padding;\n      const y = j * (graphHeight + padding) + padding;\n      doc.addImage(imgData, \"PNG\", x, y, graphWidth, graphHeight);\n    } // Load external footer HTML file\n\n\n    const footerHtml = await fetch(\"footer.html\").then(response => response.text()).then(htmlContent => {\n      const footerElement = document.createElement(\"div\");\n      footerElement.innerHTML = htmlContent;\n      return footerElement;\n    });\n    x = padding;\n    y = pageHeight - 3 * padding;\n    let footerHeight = 2 * padding; // Add footer\n\n    await addHtmlToPdf(footerHtml, x, y, graphWidth, footerHeight);\n    if (i < elements.length) doc.addPage();\n  }\n\n  doc.save(\"crime_data.pdf\");\n}","map":{"version":3,"sources":["/Users/gaurav/Downloads/aaaaaa/src/utils.ts"],"names":["jsPDF","htmlToImage","html2canvas","exportCrimeDataToPdf","doc","pageWidth","internal","pageSize","getWidth","pageHeight","getHeight","padding","graphWidth","graphHeight","elements","document","getElementsByClassName","addHtmlToPdf","html","x","y","width","height","canvas","imgData","toDataURL","addImage","i","length","headerHtml","fetch","then","response","text","htmlContent","headerElement","createElement","innerHTML","headerHeight","j","el","toPng","footerHtml","footerElement","footerHeight","addPage","save"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,OAAO,eAAeC,oBAAf,GAAsC;AAC3C,QAAMC,GAAG,GAAG,IAAIJ,KAAJ,CAAU,GAAV,EAAe,IAAf,CAAZ;AACA,QAAMK,SAAS,GAAGD,GAAG,CAACE,QAAJ,CAAaC,QAAb,CAAsBC,QAAtB,EAAlB;AACA,QAAMC,UAAU,GAAGL,GAAG,CAACE,QAAJ,CAAaC,QAAb,CAAsBG,SAAtB,EAAnB;AACA,QAAMC,OAAO,GAAG,EAAhB,CAJ2C,CAIvB;;AACpB,QAAMC,UAAU,GAAIP,SAAS,GAAG,KAAKM,OAArC,CAL2C,CAKI;;AAC/C,QAAME,WAAW,GAAG,CAACJ,UAAU,GAAC,IAAEE,OAAd,IAAuB,CAA3C,CAN2C,CAMG;;AAE9C,QAAMG,QAAQ,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,cAAhC,CAAjB;;AACA,QAAMC,YAAY,GAAG,OAAOC,IAAP,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,KAAnB,EAA0BC,MAA1B,KAAqC;AACxD,UAAMC,MAAM,GAAG,MAAMrB,WAAW,CAACgB,IAAD,CAAhC;AACA,UAAMM,OAAO,GAAGD,MAAM,CAACE,SAAP,CAAiB,WAAjB,CAAhB;AACArB,IAAAA,GAAG,CAACsB,QAAJ,CAAaF,OAAb,EAAsB,KAAtB,EAA6BL,CAA7B,EAAgCC,CAAhC,EAAmCC,KAAnC,EAA0CC,MAA1C;AACD,GAJD;;AAMA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,QAAQ,CAACc,MAA7B,EAAqCD,CAArC,EAAwC;AACpC;AAEF;AACA,UAAME,UAAU,GAAG,MAAMC,KAAK,CAAC,aAAD,CAAL,CACtBC,IADsB,CAChBC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADG,EAEtBF,IAFsB,CAEhBG,WAAD,IAAiB;AACrB,YAAMC,aAAa,GAAGpB,QAAQ,CAACqB,aAAT,CAAuB,KAAvB,CAAtB;AACAD,MAAAA,aAAa,CAACE,SAAd,GAA0BH,WAA1B;AACA,aAAOC,aAAP;AACD,KANsB,CAAzB;AAQA,QAAIhB,CAAC,GAACR,OAAN;AACA,QAAIS,CAAC,GAACT,OAAN;AACA,QAAI2B,YAAY,GAAC,IAAE3B,OAAnB,CAdsC,CAgBtC;;AACA,UAAMM,YAAY,CAACY,UAAD,EAAaV,CAAb,EAAgBC,CAAhB,EAAmBR,UAAnB,EAA+B0B,YAA/B,CAAlB;;AAEA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAF,IAAOA,CAAC,GAACZ,CAAF,GAAIb,QAAQ,CAACc,MAAjC,EAA0CW,CAAC,IAAIZ,CAAC,EAAhD,EAAmD;AACjD,YAAMa,EAAE,GAAG1B,QAAQ,CAACa,CAAD,CAAnB;AACA,YAAMH,OAAO,GAAG,MAAMvB,WAAW,CAACwC,KAAZ,CAAkBD,EAAlB,CAAtB;AAEA,YAAMrB,CAAC,GAAG,IAAER,OAAZ;AACA,YAAMS,CAAC,GAAGmB,CAAC,IAAI1B,WAAW,GAAGF,OAAlB,CAAD,GAA8BA,OAAxC;AAEAP,MAAAA,GAAG,CAACsB,QAAJ,CAAaF,OAAb,EAAsB,KAAtB,EAA6BL,CAA7B,EAAgCC,CAAhC,EAAmCR,UAAnC,EAA+CC,WAA/C;AACD,KA3BqC,CA6BtC;;;AACA,UAAM6B,UAAU,GAAG,MAAMZ,KAAK,CAAC,aAAD,CAAL,CACtBC,IADsB,CAChBC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADG,EAEtBF,IAFsB,CAEhBG,WAAD,IAAiB;AACrB,YAAMS,aAAa,GAAG5B,QAAQ,CAACqB,aAAT,CAAuB,KAAvB,CAAtB;AACAO,MAAAA,aAAa,CAACN,SAAd,GAA0BH,WAA1B;AACA,aAAOS,aAAP;AACD,KANsB,CAAzB;AAQAxB,IAAAA,CAAC,GAACR,OAAF;AACAS,IAAAA,CAAC,GAACX,UAAU,GAAC,IAAEE,OAAf;AACA,QAAIiC,YAAY,GAAC,IAAEjC,OAAnB,CAxCsC,CAyCtC;;AACA,UAAMM,YAAY,CAACyB,UAAD,EAAavB,CAAb,EAAgBC,CAAhB,EAAmBR,UAAnB,EAA+BgC,YAA/B,CAAlB;AAIA,QAAGjB,CAAC,GAACb,QAAQ,CAACc,MAAd,EACExB,GAAG,CAACyC,OAAJ;AACH;;AAEDzC,EAAAA,GAAG,CAAC0C,IAAJ,CAAS,gBAAT;AACD","sourcesContent":["import jsPDF from \"jspdf\";\nimport * as htmlToImage from \"html-to-image\";\nimport html2canvas from \"html2canvas\";\n\nexport async function exportCrimeDataToPdf() {\n  const doc = new jsPDF(\"p\", \"px\");\n  const pageWidth = doc.internal.pageSize.getWidth();\n  const pageHeight = doc.internal.pageSize.getHeight();\n  const padding = 10; // Adjust padding as needed\n  const graphWidth = (pageWidth - 10 * padding); // Four graphs in a row\n  const graphHeight = (pageHeight-6*padding)/4; // Set the desired height for each graph\n\n  const elements = document.getElementsByClassName(\"custom-chart\");\n  const addHtmlToPdf = async (html, x, y, width, height) => {\n    const canvas = await html2canvas(html);\n    const imgData = canvas.toDataURL(\"image/png\");\n    doc.addImage(imgData, \"PNG\", x, y, width, height);\n  };\n\n  for (let i = 0; i < elements.length; i) {\n      // doc.addPage(); // Add a new page for every four graphs\n\n    // Load external header HTML file\n    const headerHtml = await fetch(\"header.html\")\n      .then((response) => response.text())\n      .then((htmlContent) => {\n        const headerElement = document.createElement(\"div\");\n        headerElement.innerHTML = htmlContent;\n        return headerElement;\n      });\n\n    let x=padding;\n    let y=padding;\n    let headerHeight=3*padding;\n\n    // Add Header\n    await addHtmlToPdf(headerHtml, x, y, graphWidth, headerHeight);\n\n    for(let j=0; j<4 && j+i<elements.length ; j++, i++){\n      const el = elements[i] as HTMLElement;\n      const imgData = await htmlToImage.toPng(el);\n\n      const x = 5*padding;\n      const y = j * (graphHeight + padding) + padding;\n\n      doc.addImage(imgData, \"PNG\", x, y, graphWidth, graphHeight);\n    }\n\n    // Load external footer HTML file\n    const footerHtml = await fetch(\"footer.html\")\n      .then((response) => response.text())\n      .then((htmlContent) => {\n        const footerElement = document.createElement(\"div\");\n        footerElement.innerHTML = htmlContent;\n        return footerElement;\n      });\n      \n    x=padding;\n    y=pageHeight-3*padding;\n    let footerHeight=2*padding;\n    // Add footer\n    await addHtmlToPdf(footerHtml, x, y, graphWidth, footerHeight);\n\n\n\n    if(i<elements.length)\n      doc.addPage();\n  }\n\n  doc.save(\"crime_data.pdf\");\n}\n"]},"metadata":{},"sourceType":"module"}