{"ast":null,"code":"// import jsPDF from \"jspdf\";\n// import * as htmlToImage from \"html-to-image\";\n// export async function exportMultipleChartsToPdf() {\n//   const doc = new jsPDF(\"p\", \"px\");\n//   const elements = document.getElementsByClassName(\"custom-chart\");\n//   await creatPdf({ doc, elements });\n//   doc.save(`charts.pdf`);\n// }\n// async function creatPdf({\n//   doc,\n//   elements,\n// }: {\n//   doc: jsPDF;\n//   elements: HTMLCollectionOf<Element>;\n// }) {\n//   const padding = 10;\n//   const marginTop = 20;\n//   let top = marginTop;\n//   for (let i = 0; i < elements.length; i++) {\n//     const el = elements.item(i) as HTMLElement;\n//     const imgData = await htmlToImage.toPng(el);\n//     let elHeight = el.offsetHeight;\n//     let elWidth = el.offsetWidth;\n//     const pageWidth = doc.internal.pageSize.getWidth();\n//     if (elWidth > pageWidth) {\n//       const ratio = pageWidth / elWidth;\n//       elHeight = elHeight * ratio - padding * 2;\n//       elWidth = elWidth * ratio - padding * 2;\n//     }\n//     const pageHeight = doc.internal.pageSize.getHeight();\n//     if (top + elHeight > pageHeight) {\n//       doc.addPage();\n//       top = marginTop;\n//     }\n//     doc.addImage(imgData, \"PNG\", padding, top, elWidth, elHeight, `image${i}`);\n//     top += elHeight + marginTop;\n//   }\n// }\n// import jsPDF from \"jspdf\";\n// import * as htmlToImage from \"html-to-image\";\n// export async function exportCrimeDataToPdf() {\n//   const doc = new jsPDF(\"p\", \"px\");\n//   const crimeDataElement = document.getElementById(\"crimeData\"); // Add an id to your CrimeData component div\n//   if (crimeDataElement) {\n//     const imgData = await htmlToImage.toPng(crimeDataElement);\n//     let elHeight = crimeDataElement.offsetHeight;\n//     let elWidth = crimeDataElement.offsetWidth;\n//     const pageWidth = doc.internal.pageSize.getWidth();\n//     if (elWidth > pageWidth) {\n//       const ratio = pageWidth / elWidth;\n//       elHeight = elHeight * ratio;\n//       elWidth = elWidth * ratio;\n//     }\n//     doc.addImage(imgData, \"PNG\", 10, 10, elWidth, elHeight);\n//     doc.save(\"crime_data.pdf\");\n//   }\n// }\n// import jsPDF from \"jspdf\";\n// import * as htmlToImage from \"html-to-image\";\n// export async function exportCrimeDataToPdf() {\n//   const doc = new jsPDF(\"p\", \"px\");\n//   const elements = document.getElementsByClassName(\"custom-chart\");\n//   for (let i = 0; i < elements.length; i++) {\n//     if (i > 0) {\n//       doc.addPage(); // Add a new page for each graph\n//     }\n//     const el = elements[i] as HTMLElement;\n//     const imgData = await htmlToImage.toPng(el);\n//     let elHeight = el.offsetHeight;\n//     let elWidth = el.offsetWidth;\n//     const pageWidth = doc.internal.pageSize.getWidth();\n//     const pageHeight = doc.internal.pageSize.getHeight();\n//     if (elWidth > pageWidth) {\n//       const ratio = pageWidth / elWidth;\n//       elHeight = elHeight * ratio;\n//       elWidth = elWidth * ratio;\n//     }\n//     doc.addImage(imgData, \"PNG\", 10, 10, elWidth, elHeight);\n//   }\n//   doc.save(\"crime_data.pdf\");\n// }\nimport jsPDF from \"jspdf\";\nimport * as htmlToImage from \"html-to-image\";\nexport async function exportCrimeDataToPdf() {\n  const doc = new jsPDF(\"p\", \"px\");\n  const pageWidth = doc.internal.pageSize.getWidth();\n  const pageHeight = doc.internal.pageSize.getHeight();\n  const padding = 10; // Adjust padding as needed\n\n  const graphWidth = (pageWidth - 2 * padding) / 4; // Four graphs in a row\n\n  const graphHeight = (pageHeight - 5 * padding) / 4; // Set the desired height for each graph\n\n  const elements = document.getElementsByClassName(\"custom-chart\");\n\n  for (let i = 0; i < elements.length; i) {\n    if (i > 0 && i % 4 === 0) {\n      doc.addPage(); // Add a new page for every four graphs\n    }\n\n    for (i; i < elements.length; i++) {\n      const el = elements[i];\n      const imgData = await htmlToImage.toPng(el);\n      const x = padding;\n      const y = Math.floor(i / 4) * (graphHeight + padding) + padding;\n      doc.addImage(imgData, \"PNG\", x, y, graphWidth, graphHeight);\n    }\n  }\n\n  doc.save(\"crime_data.pdf\");\n}","map":{"version":3,"sources":["/Users/gaurav/Downloads/aaaaaa/src/utils.ts"],"names":["jsPDF","htmlToImage","exportCrimeDataToPdf","doc","pageWidth","internal","pageSize","getWidth","pageHeight","getHeight","padding","graphWidth","graphHeight","elements","document","getElementsByClassName","i","length","addPage","el","imgData","toPng","x","y","Math","floor","addImage","save"],"mappings":"AAAA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B;AAEA,OAAO,eAAeC,oBAAf,GAAsC;AAC3C,QAAMC,GAAG,GAAG,IAAIH,KAAJ,CAAU,GAAV,EAAe,IAAf,CAAZ;AACA,QAAMI,SAAS,GAAGD,GAAG,CAACE,QAAJ,CAAaC,QAAb,CAAsBC,QAAtB,EAAlB;AACA,QAAMC,UAAU,GAAGL,GAAG,CAACE,QAAJ,CAAaC,QAAb,CAAsBG,SAAtB,EAAnB;AACA,QAAMC,OAAO,GAAG,EAAhB,CAJ2C,CAIvB;;AACpB,QAAMC,UAAU,GAAG,CAACP,SAAS,GAAG,IAAIM,OAAjB,IAA4B,CAA/C,CAL2C,CAKO;;AAClD,QAAME,WAAW,GAAG,CAACJ,UAAU,GAAC,IAAEE,OAAd,IAAuB,CAA3C,CAN2C,CAMG;;AAE9C,QAAMG,QAAQ,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,cAAhC,CAAjB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACI,MAA7B,EAAqCD,CAArC,EAAwC;AACtC,QAAIA,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,CAAJ,KAAU,CAAvB,EAA0B;AACxBb,MAAAA,GAAG,CAACe,OAAJ,GADwB,CACT;AAChB;;AACD,SAAIF,CAAJ,EAAOA,CAAC,GAACH,QAAQ,CAACI,MAAlB,EAA0BD,CAAC,EAA3B,EAA8B;AAC5B,YAAMG,EAAE,GAAGN,QAAQ,CAACG,CAAD,CAAnB;AACA,YAAMI,OAAO,GAAG,MAAMnB,WAAW,CAACoB,KAAZ,CAAkBF,EAAlB,CAAtB;AAEA,YAAMG,CAAC,GAAGZ,OAAV;AACA,YAAMa,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWT,CAAC,GAAG,CAAf,KAAqBJ,WAAW,GAAGF,OAAnC,IAA8CA,OAAxD;AAEAP,MAAAA,GAAG,CAACuB,QAAJ,CAAaN,OAAb,EAAsB,KAAtB,EAA6BE,CAA7B,EAAgCC,CAAhC,EAAmCZ,UAAnC,EAA+CC,WAA/C;AACD;AAEF;;AAEDT,EAAAA,GAAG,CAACwB,IAAJ,CAAS,gBAAT;AACD","sourcesContent":["// import jsPDF from \"jspdf\";\n// import * as htmlToImage from \"html-to-image\";\n\n// export async function exportMultipleChartsToPdf() {\n//   const doc = new jsPDF(\"p\", \"px\");\n\n//   const elements = document.getElementsByClassName(\"custom-chart\");\n\n//   await creatPdf({ doc, elements });\n\n//   doc.save(`charts.pdf`);\n// }\n\n// async function creatPdf({\n//   doc,\n//   elements,\n// }: {\n//   doc: jsPDF;\n//   elements: HTMLCollectionOf<Element>;\n// }) {\n//   const padding = 10;\n//   const marginTop = 20;\n//   let top = marginTop;\n  \n\n//   for (let i = 0; i < elements.length; i++) {\n//     const el = elements.item(i) as HTMLElement;\n//     const imgData = await htmlToImage.toPng(el);\n\n//     let elHeight = el.offsetHeight;\n//     let elWidth = el.offsetWidth;\n\n//     const pageWidth = doc.internal.pageSize.getWidth();\n\n//     if (elWidth > pageWidth) {\n//       const ratio = pageWidth / elWidth;\n//       elHeight = elHeight * ratio - padding * 2;\n//       elWidth = elWidth * ratio - padding * 2;\n//     }\n\n//     const pageHeight = doc.internal.pageSize.getHeight();\n\n//     if (top + elHeight > pageHeight) {\n//       doc.addPage();\n//       top = marginTop;\n//     }\n\n//     doc.addImage(imgData, \"PNG\", padding, top, elWidth, elHeight, `image${i}`);\n//     top += elHeight + marginTop;\n//   }\n// }\n\n\n\n// import jsPDF from \"jspdf\";\n// import * as htmlToImage from \"html-to-image\";\n\n// export async function exportCrimeDataToPdf() {\n//   const doc = new jsPDF(\"p\", \"px\");\n\n//   const crimeDataElement = document.getElementById(\"crimeData\"); // Add an id to your CrimeData component div\n\n//   if (crimeDataElement) {\n//     const imgData = await htmlToImage.toPng(crimeDataElement);\n\n//     let elHeight = crimeDataElement.offsetHeight;\n//     let elWidth = crimeDataElement.offsetWidth;\n\n//     const pageWidth = doc.internal.pageSize.getWidth();\n\n//     if (elWidth > pageWidth) {\n//       const ratio = pageWidth / elWidth;\n//       elHeight = elHeight * ratio;\n//       elWidth = elWidth * ratio;\n//     }\n\n//     doc.addImage(imgData, \"PNG\", 10, 10, elWidth, elHeight);\n\n//     doc.save(\"crime_data.pdf\");\n//   }\n// }\n\n\n\n// import jsPDF from \"jspdf\";\n// import * as htmlToImage from \"html-to-image\";\n\n// export async function exportCrimeDataToPdf() {\n//   const doc = new jsPDF(\"p\", \"px\");\n\n//   const elements = document.getElementsByClassName(\"custom-chart\");\n\n//   for (let i = 0; i < elements.length; i++) {\n//     if (i > 0) {\n//       doc.addPage(); // Add a new page for each graph\n//     }\n\n//     const el = elements[i] as HTMLElement;\n//     const imgData = await htmlToImage.toPng(el);\n\n//     let elHeight = el.offsetHeight;\n//     let elWidth = el.offsetWidth;\n\n//     const pageWidth = doc.internal.pageSize.getWidth();\n//     const pageHeight = doc.internal.pageSize.getHeight();\n\n//     if (elWidth > pageWidth) {\n//       const ratio = pageWidth / elWidth;\n//       elHeight = elHeight * ratio;\n//       elWidth = elWidth * ratio;\n//     }\n\n//     doc.addImage(imgData, \"PNG\", 10, 10, elWidth, elHeight);\n//   }\n\n//   doc.save(\"crime_data.pdf\");\n// }\n\n\nimport jsPDF from \"jspdf\";\nimport * as htmlToImage from \"html-to-image\";\n\nexport async function exportCrimeDataToPdf() {\n  const doc = new jsPDF(\"p\", \"px\");\n  const pageWidth = doc.internal.pageSize.getWidth();\n  const pageHeight = doc.internal.pageSize.getHeight();\n  const padding = 10; // Adjust padding as needed\n  const graphWidth = (pageWidth - 2 * padding) / 4; // Four graphs in a row\n  const graphHeight = (pageHeight-5*padding)/4; // Set the desired height for each graph\n\n  const elements = document.getElementsByClassName(\"custom-chart\");\n\n  for (let i = 0; i < elements.length; i) {\n    if (i > 0 && i % 4 === 0) {\n      doc.addPage(); // Add a new page for every four graphs\n    }\n    for(i; i<elements.length; i++){\n      const el = elements[i] as HTMLElement;\n      const imgData = await htmlToImage.toPng(el);\n\n      const x = padding;\n      const y = Math.floor(i / 4) * (graphHeight + padding) + padding;\n\n      doc.addImage(imgData, \"PNG\", x, y, graphWidth, graphHeight);\n    }\n    \n  }\n\n  doc.save(\"crime_data.pdf\");\n}\n"]},"metadata":{},"sourceType":"module"}