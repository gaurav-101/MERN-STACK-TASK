{"ast":null,"code":"import jsPDF from \"jspdf\";\nimport * as htmlToImage from \"html-to-image\";\nimport html2canvas from \"html2canvas\";\nexport async function exportCrimeDataToPdf() {\n  const doc = new jsPDF(\"p\", \"px\");\n  const pageWidth = doc.internal.pageSize.getWidth();\n  const pageHeight = doc.internal.pageSize.getHeight();\n  const padding = 10; // Adjust padding as needed\n\n  const graphWidth = pageWidth - 10 * padding; // Four graphs in a row\n\n  const graphHeight = (pageHeight - 6 * padding) / 4; // Set the desired height for each graph\n\n  const elements = document.getElementsByClassName(\"custom-chart\");\n\n  const addHtmlToPdf = async (html, x, y, width, height) => {\n    const canvas = await html2canvas(html);\n    const imgData = canvas.toDataURL(\"image/png\");\n    doc.addImage(imgData, \"PNG\", x, y, width, height);\n  };\n\n  for (let i = 0; i < elements.length; i) {\n    // doc.addPage(); // Add a new page for every four graphs\n    for (let j = 0; j < 4 && j + i < elements.length; j++, i++) {\n      const el = elements[i];\n      const imgData = await htmlToImage.toPng(el);\n      const x = 5 * padding;\n      const y = j * (graphHeight + padding) + padding;\n      doc.addImage(imgData, \"PNG\", x, y, graphWidth, graphHeight);\n    }\n\n    if (i < elements.length) doc.addPage();\n  }\n\n  doc.save(\"crime_data.pdf\");\n}","map":{"version":3,"sources":["/Users/gaurav/Downloads/aaaaaa/src/utils.ts"],"names":["jsPDF","htmlToImage","html2canvas","exportCrimeDataToPdf","doc","pageWidth","internal","pageSize","getWidth","pageHeight","getHeight","padding","graphWidth","graphHeight","elements","document","getElementsByClassName","addHtmlToPdf","html","x","y","width","height","canvas","imgData","toDataURL","addImage","i","length","j","el","toPng","addPage","save"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,OAAO,eAAeC,oBAAf,GAAsC;AAC3C,QAAMC,GAAG,GAAG,IAAIJ,KAAJ,CAAU,GAAV,EAAe,IAAf,CAAZ;AACA,QAAMK,SAAS,GAAGD,GAAG,CAACE,QAAJ,CAAaC,QAAb,CAAsBC,QAAtB,EAAlB;AACA,QAAMC,UAAU,GAAGL,GAAG,CAACE,QAAJ,CAAaC,QAAb,CAAsBG,SAAtB,EAAnB;AACA,QAAMC,OAAO,GAAG,EAAhB,CAJ2C,CAIvB;;AACpB,QAAMC,UAAU,GAAIP,SAAS,GAAG,KAAKM,OAArC,CAL2C,CAKI;;AAC/C,QAAME,WAAW,GAAG,CAACJ,UAAU,GAAC,IAAEE,OAAd,IAAuB,CAA3C,CAN2C,CAMG;;AAE9C,QAAMG,QAAQ,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,cAAhC,CAAjB;;AACA,QAAMC,YAAY,GAAG,OAAOC,IAAP,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,KAAnB,EAA0BC,MAA1B,KAAqC;AACxD,UAAMC,MAAM,GAAG,MAAMrB,WAAW,CAACgB,IAAD,CAAhC;AACA,UAAMM,OAAO,GAAGD,MAAM,CAACE,SAAP,CAAiB,WAAjB,CAAhB;AACArB,IAAAA,GAAG,CAACsB,QAAJ,CAAaF,OAAb,EAAsB,KAAtB,EAA6BL,CAA7B,EAAgCC,CAAhC,EAAmCC,KAAnC,EAA0CC,MAA1C;AACD,GAJD;;AAMA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,QAAQ,CAACc,MAA7B,EAAqCD,CAArC,EAAwC;AACpC;AAEF,SAAI,IAAIE,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAF,IAAOA,CAAC,GAACF,CAAF,GAAIb,QAAQ,CAACc,MAAjC,EAA0CC,CAAC,IAAIF,CAAC,EAAhD,EAAmD;AACjD,YAAMG,EAAE,GAAGhB,QAAQ,CAACa,CAAD,CAAnB;AACA,YAAMH,OAAO,GAAG,MAAMvB,WAAW,CAAC8B,KAAZ,CAAkBD,EAAlB,CAAtB;AAEA,YAAMX,CAAC,GAAG,IAAER,OAAZ;AACA,YAAMS,CAAC,GAAGS,CAAC,IAAIhB,WAAW,GAAGF,OAAlB,CAAD,GAA8BA,OAAxC;AAEAP,MAAAA,GAAG,CAACsB,QAAJ,CAAaF,OAAb,EAAsB,KAAtB,EAA6BL,CAA7B,EAAgCC,CAAhC,EAAmCR,UAAnC,EAA+CC,WAA/C;AACD;;AAED,QAAGc,CAAC,GAACb,QAAQ,CAACc,MAAd,EACExB,GAAG,CAAC4B,OAAJ;AACH;;AAED5B,EAAAA,GAAG,CAAC6B,IAAJ,CAAS,gBAAT;AACD","sourcesContent":["import jsPDF from \"jspdf\";\nimport * as htmlToImage from \"html-to-image\";\nimport html2canvas from \"html2canvas\";\n\nexport async function exportCrimeDataToPdf() {\n  const doc = new jsPDF(\"p\", \"px\");\n  const pageWidth = doc.internal.pageSize.getWidth();\n  const pageHeight = doc.internal.pageSize.getHeight();\n  const padding = 10; // Adjust padding as needed\n  const graphWidth = (pageWidth - 10 * padding); // Four graphs in a row\n  const graphHeight = (pageHeight-6*padding)/4; // Set the desired height for each graph\n\n  const elements = document.getElementsByClassName(\"custom-chart\");\n  const addHtmlToPdf = async (html, x, y, width, height) => {\n    const canvas = await html2canvas(html);\n    const imgData = canvas.toDataURL(\"image/png\");\n    doc.addImage(imgData, \"PNG\", x, y, width, height);\n  };\n\n  for (let i = 0; i < elements.length; i) {\n      // doc.addPage(); // Add a new page for every four graphs\n\n    for(let j=0; j<4 && j+i<elements.length ; j++, i++){\n      const el = elements[i] as HTMLElement;\n      const imgData = await htmlToImage.toPng(el);\n\n      const x = 5*padding;\n      const y = j * (graphHeight + padding) + padding;\n\n      doc.addImage(imgData, \"PNG\", x, y, graphWidth, graphHeight);\n    }\n    \n    if(i<elements.length)\n      doc.addPage();\n  }\n\n  doc.save(\"crime_data.pdf\");\n}\n"]},"metadata":{},"sourceType":"module"}