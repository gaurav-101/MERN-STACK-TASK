{"ast":null,"code":"// import jsPDF from \"jspdf\";\n// import * as htmlToImage from \"html-to-image\";\n// export async function exportMultipleChartsToPdf() {\n//   const doc = new jsPDF(\"p\", \"px\");\n//   const elements = document.getElementsByClassName(\"custom-chart\");\n//   await creatPdf({ doc, elements });\n//   doc.save(`charts.pdf`);\n// }\n// async function creatPdf({\n//   doc,\n//   elements,\n// }: {\n//   doc: jsPDF;\n//   elements: HTMLCollectionOf<Element>;\n// }) {\n//   const padding = 10;\n//   const marginTop = 20;\n//   let top = marginTop;\n//   for (let i = 0; i < elements.length; i++) {\n//     const el = elements.item(i) as HTMLElement;\n//     const imgData = await htmlToImage.toPng(el);\n//     let elHeight = el.offsetHeight;\n//     let elWidth = el.offsetWidth;\n//     const pageWidth = doc.internal.pageSize.getWidth();\n//     if (elWidth > pageWidth) {\n//       const ratio = pageWidth / elWidth;\n//       elHeight = elHeight * ratio - padding * 2;\n//       elWidth = elWidth * ratio - padding * 2;\n//     }\n//     const pageHeight = doc.internal.pageSize.getHeight();\n//     if (top + elHeight > pageHeight) {\n//       doc.addPage();\n//       top = marginTop;\n//     }\n//     doc.addImage(imgData, \"PNG\", padding, top, elWidth, elHeight, `image${i}`);\n//     top += elHeight + marginTop;\n//   }\n// }\n// import jsPDF from \"jspdf\";\n// import * as htmlToImage from \"html-to-image\";\n// export async function exportCrimeDataToPdf() {\n//   const doc = new jsPDF(\"p\", \"px\");\n//   const crimeDataElement = document.getElementById(\"crimeData\"); // Add an id to your CrimeData component div\n//   if (crimeDataElement) {\n//     const imgData = await htmlToImage.toPng(crimeDataElement);\n//     let elHeight = crimeDataElement.offsetHeight;\n//     let elWidth = crimeDataElement.offsetWidth;\n//     const pageWidth = doc.internal.pageSize.getWidth();\n//     if (elWidth > pageWidth) {\n//       const ratio = pageWidth / elWidth;\n//       elHeight = elHeight * ratio;\n//       elWidth = elWidth * ratio;\n//     }\n//     doc.addImage(imgData, \"PNG\", 10, 10, elWidth, elHeight);\n//     doc.save(\"crime_data.pdf\");\n//   }\n// }\nimport jsPDF from \"jspdf\";\nimport * as htmlToImage from \"html-to-image\";\n\nasync function createPdfWithPagination(doc, elements) {\n  const padding = 10;\n  const marginTop = 20;\n  let top = marginTop;\n  let currentPage = 1;\n\n  for (let i = 0; i < elements.length; i++) {\n    const el = elements.item(i);\n    const imgData = await htmlToImage.toPng(el);\n    let elHeight = el.offsetHeight;\n    let elWidth = el.offsetWidth;\n    const pageWidth = doc.internal.pageSize.getWidth();\n\n    if (elWidth > pageWidth) {\n      const ratio = pageWidth / elWidth;\n      elHeight = elHeight * ratio - padding * 2;\n      elWidth = elWidth * ratio - padding * 2;\n    }\n\n    const pageHeight = doc.internal.pageSize.getHeight();\n\n    if (top + elHeight > pageHeight) {\n      doc.addPage();\n      top = marginTop;\n      currentPage++;\n      doc.setPage(currentPage);\n    }\n\n    doc.addImage(imgData, \"PNG\", padding, top, elWidth, elHeight, `image${i}`);\n    top += elHeight + marginTop;\n  }\n}\n\nexport async function exportCrimeDataToPdf() {\n  const doc = new jsPDF(\"p\", \"px\");\n  const crimeDataElement = document.getElementById(\"crimeData\");\n\n  if (crimeDataElement) {\n    const elements = document.getElementsByClassName(\"custom-chart\");\n    await createPdfWithPagination(doc, elements);\n    doc.save(\"crime_data.pdf\");\n  }\n}","map":{"version":3,"sources":["/Users/gaurav/Downloads/aaaaaa/src/utils.ts"],"names":["jsPDF","htmlToImage","createPdfWithPagination","doc","elements","padding","marginTop","top","currentPage","i","length","el","item","imgData","toPng","elHeight","offsetHeight","elWidth","offsetWidth","pageWidth","internal","pageSize","getWidth","ratio","pageHeight","getHeight","addPage","setPage","addImage","exportCrimeDataToPdf","crimeDataElement","document","getElementById","getElementsByClassName","save"],"mappings":"AAAA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAKA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B;;AAEA,eAAeC,uBAAf,CAAuCC,GAAvC,EAA4CC,QAA5C,EAAsD;AACpD,QAAMC,OAAO,GAAG,EAAhB;AACA,QAAMC,SAAS,GAAG,EAAlB;AACA,MAAIC,GAAG,GAAGD,SAAV;AACA,MAAIE,WAAW,GAAG,CAAlB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,QAAQ,CAACM,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,UAAME,EAAE,GAAGP,QAAQ,CAACQ,IAAT,CAAcH,CAAd,CAAX;AACA,UAAMI,OAAO,GAAG,MAAMZ,WAAW,CAACa,KAAZ,CAAkBH,EAAlB,CAAtB;AAEA,QAAII,QAAQ,GAAGJ,EAAE,CAACK,YAAlB;AACA,QAAIC,OAAO,GAAGN,EAAE,CAACO,WAAjB;AAEA,UAAMC,SAAS,GAAGhB,GAAG,CAACiB,QAAJ,CAAaC,QAAb,CAAsBC,QAAtB,EAAlB;;AAEA,QAAIL,OAAO,GAAGE,SAAd,EAAyB;AACvB,YAAMI,KAAK,GAAGJ,SAAS,GAAGF,OAA1B;AACAF,MAAAA,QAAQ,GAAGA,QAAQ,GAAGQ,KAAX,GAAmBlB,OAAO,GAAG,CAAxC;AACAY,MAAAA,OAAO,GAAGA,OAAO,GAAGM,KAAV,GAAkBlB,OAAO,GAAG,CAAtC;AACD;;AAED,UAAMmB,UAAU,GAAGrB,GAAG,CAACiB,QAAJ,CAAaC,QAAb,CAAsBI,SAAtB,EAAnB;;AAEA,QAAIlB,GAAG,GAAGQ,QAAN,GAAiBS,UAArB,EAAiC;AAC/BrB,MAAAA,GAAG,CAACuB,OAAJ;AACAnB,MAAAA,GAAG,GAAGD,SAAN;AACAE,MAAAA,WAAW;AACXL,MAAAA,GAAG,CAACwB,OAAJ,CAAYnB,WAAZ;AACD;;AAEDL,IAAAA,GAAG,CAACyB,QAAJ,CAAaf,OAAb,EAAsB,KAAtB,EAA6BR,OAA7B,EAAsCE,GAAtC,EAA2CU,OAA3C,EAAoDF,QAApD,EAA+D,QAAON,CAAE,EAAxE;AACAF,IAAAA,GAAG,IAAIQ,QAAQ,GAAGT,SAAlB;AACD;AACF;;AAED,OAAO,eAAeuB,oBAAf,GAAsC;AAC3C,QAAM1B,GAAG,GAAG,IAAIH,KAAJ,CAAU,GAAV,EAAe,IAAf,CAAZ;AAEA,QAAM8B,gBAAgB,GAAGC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAzB;;AAEA,MAAIF,gBAAJ,EAAsB;AACpB,UAAM1B,QAAQ,GAAG2B,QAAQ,CAACE,sBAAT,CAAgC,cAAhC,CAAjB;AACA,UAAM/B,uBAAuB,CAACC,GAAD,EAAMC,QAAN,CAA7B;AAEAD,IAAAA,GAAG,CAAC+B,IAAJ,CAAS,gBAAT;AACD;AACF","sourcesContent":["// import jsPDF from \"jspdf\";\n// import * as htmlToImage from \"html-to-image\";\n\n// export async function exportMultipleChartsToPdf() {\n//   const doc = new jsPDF(\"p\", \"px\");\n\n//   const elements = document.getElementsByClassName(\"custom-chart\");\n\n//   await creatPdf({ doc, elements });\n\n//   doc.save(`charts.pdf`);\n// }\n\n// async function creatPdf({\n//   doc,\n//   elements,\n// }: {\n//   doc: jsPDF;\n//   elements: HTMLCollectionOf<Element>;\n// }) {\n//   const padding = 10;\n//   const marginTop = 20;\n//   let top = marginTop;\n  \n\n//   for (let i = 0; i < elements.length; i++) {\n//     const el = elements.item(i) as HTMLElement;\n//     const imgData = await htmlToImage.toPng(el);\n\n//     let elHeight = el.offsetHeight;\n//     let elWidth = el.offsetWidth;\n\n//     const pageWidth = doc.internal.pageSize.getWidth();\n\n//     if (elWidth > pageWidth) {\n//       const ratio = pageWidth / elWidth;\n//       elHeight = elHeight * ratio - padding * 2;\n//       elWidth = elWidth * ratio - padding * 2;\n//     }\n\n//     const pageHeight = doc.internal.pageSize.getHeight();\n\n//     if (top + elHeight > pageHeight) {\n//       doc.addPage();\n//       top = marginTop;\n//     }\n\n//     doc.addImage(imgData, \"PNG\", padding, top, elWidth, elHeight, `image${i}`);\n//     top += elHeight + marginTop;\n//   }\n// }\n\n\n\n// import jsPDF from \"jspdf\";\n// import * as htmlToImage from \"html-to-image\";\n\n// export async function exportCrimeDataToPdf() {\n//   const doc = new jsPDF(\"p\", \"px\");\n\n//   const crimeDataElement = document.getElementById(\"crimeData\"); // Add an id to your CrimeData component div\n\n//   if (crimeDataElement) {\n//     const imgData = await htmlToImage.toPng(crimeDataElement);\n\n//     let elHeight = crimeDataElement.offsetHeight;\n//     let elWidth = crimeDataElement.offsetWidth;\n\n//     const pageWidth = doc.internal.pageSize.getWidth();\n\n//     if (elWidth > pageWidth) {\n//       const ratio = pageWidth / elWidth;\n//       elHeight = elHeight * ratio;\n//       elWidth = elWidth * ratio;\n//     }\n\n//     doc.addImage(imgData, \"PNG\", 10, 10, elWidth, elHeight);\n\n//     doc.save(\"crime_data.pdf\");\n//   }\n// }\n\n\n\n\nimport jsPDF from \"jspdf\";\nimport * as htmlToImage from \"html-to-image\";\n\nasync function createPdfWithPagination(doc, elements) {\n  const padding = 10;\n  const marginTop = 20;\n  let top = marginTop;\n  let currentPage = 1;\n\n  for (let i = 0; i < elements.length; i++) {\n    const el = elements.item(i) as HTMLElement;\n    const imgData = await htmlToImage.toPng(el);\n\n    let elHeight = el.offsetHeight;\n    let elWidth = el.offsetWidth;\n\n    const pageWidth = doc.internal.pageSize.getWidth();\n\n    if (elWidth > pageWidth) {\n      const ratio = pageWidth / elWidth;\n      elHeight = elHeight * ratio - padding * 2;\n      elWidth = elWidth * ratio - padding * 2;\n    }\n\n    const pageHeight = doc.internal.pageSize.getHeight();\n\n    if (top + elHeight > pageHeight) {\n      doc.addPage();\n      top = marginTop;\n      currentPage++;\n      doc.setPage(currentPage);\n    }\n\n    doc.addImage(imgData, \"PNG\", padding, top, elWidth, elHeight, `image${i}`);\n    top += elHeight + marginTop;\n  }\n}\n\nexport async function exportCrimeDataToPdf() {\n  const doc = new jsPDF(\"p\", \"px\");\n\n  const crimeDataElement = document.getElementById(\"crimeData\");\n\n  if (crimeDataElement) {\n    const elements = document.getElementsByClassName(\"custom-chart\");\n    await createPdfWithPagination(doc, elements);\n\n    doc.save(\"crime_data.pdf\");\n  }\n}\n"]},"metadata":{},"sourceType":"module"}