{"ast":null,"code":"// import jsPDF from \"jspdf\";\n// import * as htmlToImage from \"html-to-image\";\n// export async function exportMultipleChartsToPdf() {\n//   const doc = new jsPDF(\"p\", \"px\");\n//   const elements = document.getElementsByClassName(\"custom-chart\");\n//   await creatPdf({ doc, elements });\n//   doc.save(`charts.pdf`);\n// }\n// async function creatPdf({\n//   doc,\n//   elements,\n// }: {\n//   doc: jsPDF;\n//   elements: HTMLCollectionOf<Element>;\n// }) {\n//   const padding = 10;\n//   const marginTop = 20;\n//   let top = marginTop;\n//   for (let i = 0; i < elements.length; i++) {\n//     const el = elements.item(i) as HTMLElement;\n//     const imgData = await htmlToImage.toPng(el);\n//     let elHeight = el.offsetHeight;\n//     let elWidth = el.offsetWidth;\n//     const pageWidth = doc.internal.pageSize.getWidth();\n//     if (elWidth > pageWidth) {\n//       const ratio = pageWidth / elWidth;\n//       elHeight = elHeight * ratio - padding * 2;\n//       elWidth = elWidth * ratio - padding * 2;\n//     }\n//     const pageHeight = doc.internal.pageSize.getHeight();\n//     if (top + elHeight > pageHeight) {\n//       doc.addPage();\n//       top = marginTop;\n//     }\n//     doc.addImage(imgData, \"PNG\", padding, top, elWidth, elHeight, `image${i}`);\n//     top += elHeight + marginTop;\n//   }\n// }\n// import jsPDF from \"jspdf\";\n// import * as htmlToImage from \"html-to-image\";\n// export async function exportCrimeDataToPdf() {\n//   const doc = new jsPDF(\"p\", \"px\");\n//   const crimeDataElement = document.getElementById(\"crimeData\"); // Add an id to your CrimeData component div\n//   if (crimeDataElement) {\n//     const imgData = await htmlToImage.toPng(crimeDataElement);\n//     let elHeight = crimeDataElement.offsetHeight;\n//     let elWidth = crimeDataElement.offsetWidth;\n//     const pageWidth = doc.internal.pageSize.getWidth();\n//     if (elWidth > pageWidth) {\n//       const ratio = pageWidth / elWidth;\n//       elHeight = elHeight * ratio;\n//       elWidth = elWidth * ratio;\n//     }\n//     doc.addImage(imgData, \"PNG\", 10, 10, elWidth, elHeight);\n//     doc.save(\"crime_data.pdf\");\n//   }\n// }\nimport jsPDF from \"jspdf\";\nimport * as htmlToImage from \"html-to-image\";\nexport async function exportCrimeDataToPdf() {\n  const doc = new jsPDF(\"p\", \"px\");\n  const elements = document.getElementsByClassName(\"custom-chart\");\n\n  for (let i = 0; i < elements.length; i++) {\n    if (i > 0) {\n      doc.addPage(); // Add a new page for each graph\n    }\n\n    const el = elements[i];\n    const imgData = await htmlToImage.toPng(el);\n    let elHeight = el.offsetHeight;\n    let elWidth = el.offsetWidth;\n    const pageWidth = doc.internal.pageSize.getWidth();\n    const pageHeight = doc.internal.pageSize.getHeight();\n\n    if (elWidth > pageWidth) {\n      const ratio = pageWidth / elWidth;\n      elHeight = elHeight * ratio;\n      elWidth = elWidth * ratio;\n    }\n\n    doc.addImage(imgData, \"PNG\", 10, 10, elWidth, elHeight);\n  }\n\n  doc.save(\"crime_data.pdf\");\n}","map":{"version":3,"sources":["/Users/gaurav/Downloads/aaaaaa/src/utils.ts"],"names":["jsPDF","htmlToImage","exportCrimeDataToPdf","doc","elements","document","getElementsByClassName","i","length","addPage","el","imgData","toPng","elHeight","offsetHeight","elWidth","offsetWidth","pageWidth","internal","pageSize","getWidth","pageHeight","getHeight","ratio","addImage","save"],"mappings":"AAAA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B;AAEA,OAAO,eAAeC,oBAAf,GAAsC;AAC3C,QAAMC,GAAG,GAAG,IAAIH,KAAJ,CAAU,GAAV,EAAe,IAAf,CAAZ;AAEA,QAAMI,QAAQ,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,cAAhC,CAAjB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACI,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,QAAIA,CAAC,GAAG,CAAR,EAAW;AACTJ,MAAAA,GAAG,CAACM,OAAJ,GADS,CACM;AAChB;;AAED,UAAMC,EAAE,GAAGN,QAAQ,CAACG,CAAD,CAAnB;AACA,UAAMI,OAAO,GAAG,MAAMV,WAAW,CAACW,KAAZ,CAAkBF,EAAlB,CAAtB;AAEA,QAAIG,QAAQ,GAAGH,EAAE,CAACI,YAAlB;AACA,QAAIC,OAAO,GAAGL,EAAE,CAACM,WAAjB;AAEA,UAAMC,SAAS,GAAGd,GAAG,CAACe,QAAJ,CAAaC,QAAb,CAAsBC,QAAtB,EAAlB;AACA,UAAMC,UAAU,GAAGlB,GAAG,CAACe,QAAJ,CAAaC,QAAb,CAAsBG,SAAtB,EAAnB;;AAEA,QAAIP,OAAO,GAAGE,SAAd,EAAyB;AACvB,YAAMM,KAAK,GAAGN,SAAS,GAAGF,OAA1B;AACAF,MAAAA,QAAQ,GAAGA,QAAQ,GAAGU,KAAtB;AACAR,MAAAA,OAAO,GAAGA,OAAO,GAAGQ,KAApB;AACD;;AAEDpB,IAAAA,GAAG,CAACqB,QAAJ,CAAab,OAAb,EAAsB,KAAtB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqCI,OAArC,EAA8CF,QAA9C;AACD;;AAEDV,EAAAA,GAAG,CAACsB,IAAJ,CAAS,gBAAT;AACD","sourcesContent":["// import jsPDF from \"jspdf\";\n// import * as htmlToImage from \"html-to-image\";\n\n// export async function exportMultipleChartsToPdf() {\n//   const doc = new jsPDF(\"p\", \"px\");\n\n//   const elements = document.getElementsByClassName(\"custom-chart\");\n\n//   await creatPdf({ doc, elements });\n\n//   doc.save(`charts.pdf`);\n// }\n\n// async function creatPdf({\n//   doc,\n//   elements,\n// }: {\n//   doc: jsPDF;\n//   elements: HTMLCollectionOf<Element>;\n// }) {\n//   const padding = 10;\n//   const marginTop = 20;\n//   let top = marginTop;\n  \n\n//   for (let i = 0; i < elements.length; i++) {\n//     const el = elements.item(i) as HTMLElement;\n//     const imgData = await htmlToImage.toPng(el);\n\n//     let elHeight = el.offsetHeight;\n//     let elWidth = el.offsetWidth;\n\n//     const pageWidth = doc.internal.pageSize.getWidth();\n\n//     if (elWidth > pageWidth) {\n//       const ratio = pageWidth / elWidth;\n//       elHeight = elHeight * ratio - padding * 2;\n//       elWidth = elWidth * ratio - padding * 2;\n//     }\n\n//     const pageHeight = doc.internal.pageSize.getHeight();\n\n//     if (top + elHeight > pageHeight) {\n//       doc.addPage();\n//       top = marginTop;\n//     }\n\n//     doc.addImage(imgData, \"PNG\", padding, top, elWidth, elHeight, `image${i}`);\n//     top += elHeight + marginTop;\n//   }\n// }\n\n\n\n// import jsPDF from \"jspdf\";\n// import * as htmlToImage from \"html-to-image\";\n\n// export async function exportCrimeDataToPdf() {\n//   const doc = new jsPDF(\"p\", \"px\");\n\n//   const crimeDataElement = document.getElementById(\"crimeData\"); // Add an id to your CrimeData component div\n\n//   if (crimeDataElement) {\n//     const imgData = await htmlToImage.toPng(crimeDataElement);\n\n//     let elHeight = crimeDataElement.offsetHeight;\n//     let elWidth = crimeDataElement.offsetWidth;\n\n//     const pageWidth = doc.internal.pageSize.getWidth();\n\n//     if (elWidth > pageWidth) {\n//       const ratio = pageWidth / elWidth;\n//       elHeight = elHeight * ratio;\n//       elWidth = elWidth * ratio;\n//     }\n\n//     doc.addImage(imgData, \"PNG\", 10, 10, elWidth, elHeight);\n\n//     doc.save(\"crime_data.pdf\");\n//   }\n// }\n\n\n\nimport jsPDF from \"jspdf\";\nimport * as htmlToImage from \"html-to-image\";\n\nexport async function exportCrimeDataToPdf() {\n  const doc = new jsPDF(\"p\", \"px\");\n\n  const elements = document.getElementsByClassName(\"custom-chart\");\n\n  for (let i = 0; i < elements.length; i++) {\n    if (i > 0) {\n      doc.addPage(); // Add a new page for each graph\n    }\n\n    const el = elements[i] as HTMLElement;\n    const imgData = await htmlToImage.toPng(el);\n\n    let elHeight = el.offsetHeight;\n    let elWidth = el.offsetWidth;\n\n    const pageWidth = doc.internal.pageSize.getWidth();\n    const pageHeight = doc.internal.pageSize.getHeight();\n\n    if (elWidth > pageWidth) {\n      const ratio = pageWidth / elWidth;\n      elHeight = elHeight * ratio;\n      elWidth = elWidth * ratio;\n    }\n\n    doc.addImage(imgData, \"PNG\", 10, 10, elWidth, elHeight);\n  }\n\n  doc.save(\"crime_data.pdf\");\n}\n"]},"metadata":{},"sourceType":"module"}