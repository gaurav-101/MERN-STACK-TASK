{"ast":null,"code":"var _jsxFileName = \"/Users/gaurav/Downloads/aaaaaa/src/CrimeData.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Chart from \"./Chart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CrimeData = () => {\n  _s();\n\n  const [crimeData, setCrimeData] = useState({});\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    axios.get(\"https://api.usa.gov/crime/fbi/cde/arrest/state/AK/all?from=2015&to=2020&API_KEY=iiHnOKfno2Mgkt5AynpvPpUQTEyxE77jo1RU8PIv\").then(response => {\n      const data = response.data.data;\n\n      if (data) {\n        const crimeDataByType = {};\n        data.forEach(entry => {\n          Object.keys(entry).forEach(key => {\n            if (key !== \"data_year\") {\n              if (!crimeDataByType[key]) {\n                crimeDataByType[key] = [];\n              }\n\n              crimeDataByType[key].push(entry[key]);\n            }\n          });\n        });\n        setCrimeData(crimeDataByType); // Create chart data and options for each crime type\n\n        const chartDataByType = {};\n        Object.keys(crimeDataByType).forEach(crimeType => {\n          chartDataByType[crimeType] = {\n            labels: data.map(entry => entry.data_year),\n            datasets: [{\n              label: crimeType,\n              data: crimeDataByType[crimeType],\n              borderColor: \"rgba(75, 192, 192, 1)\",\n              borderWidth: 1,\n              fill: false\n            }]\n          };\n        });\n        setChartData(chartDataByType);\n      } else {\n        console.error(\"No data found in the response.\");\n      }\n    }).catch(error => {\n      console.error(\"Error fetching data:\", error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Crime Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), Object.keys(crimeData).map(crimeType => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: crimeType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Chart, {\n        chartData: chartData[crimeType]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, crimeType, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CrimeData, \"Qq6hu8tAtAXF4O3LQW8Cm3oWhOE=\");\n\n_c = CrimeData;\nexport default CrimeData;\n\nvar _c;\n\n$RefreshReg$(_c, \"CrimeData\");","map":{"version":3,"sources":["/Users/gaurav/Downloads/aaaaaa/src/CrimeData.tsx"],"names":["React","useEffect","useState","axios","Chart","CrimeData","crimeData","setCrimeData","chartData","setChartData","get","then","response","data","crimeDataByType","forEach","entry","Object","keys","key","push","chartDataByType","crimeType","labels","map","data_year","datasets","label","borderColor","borderWidth","fill","console","error","catch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,EAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,KAAK,CACFO,GADH,CAEI,0HAFJ,EAIGC,IAJH,CAISC,QAAD,IAAc;AAClB,YAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAT,CAAcA,IAA3B;;AACA,UAAIA,IAAJ,EAAU;AACR,cAAMC,eAAe,GAAG,EAAxB;AAEAD,QAAAA,IAAI,CAACE,OAAL,CAAcC,KAAD,IAAW;AACtBC,UAAAA,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBD,OAAnB,CAA4BI,GAAD,IAAS;AAClC,gBAAIA,GAAG,KAAK,WAAZ,EAAyB;AACvB,kBAAI,CAACL,eAAe,CAACK,GAAD,CAApB,EAA2B;AACzBL,gBAAAA,eAAe,CAACK,GAAD,CAAf,GAAuB,EAAvB;AACD;;AACDL,cAAAA,eAAe,CAACK,GAAD,CAAf,CAAqBC,IAArB,CAA0BJ,KAAK,CAACG,GAAD,CAA/B;AACD;AACF,WAPD;AAQD,SATD;AAWAZ,QAAAA,YAAY,CAACO,eAAD,CAAZ,CAdQ,CAgBR;;AACA,cAAMO,eAAe,GAAG,EAAxB;AACAJ,QAAAA,MAAM,CAACC,IAAP,CAAYJ,eAAZ,EAA6BC,OAA7B,CAAsCO,SAAD,IAAe;AAClDD,UAAAA,eAAe,CAACC,SAAD,CAAf,GAA6B;AAC3BC,YAAAA,MAAM,EAAEV,IAAI,CAACW,GAAL,CAAUR,KAAD,IAAWA,KAAK,CAACS,SAA1B,CADmB;AAE3BC,YAAAA,QAAQ,EAAE,CACR;AACEC,cAAAA,KAAK,EAAEL,SADT;AAEET,cAAAA,IAAI,EAAEC,eAAe,CAACQ,SAAD,CAFvB;AAGEM,cAAAA,WAAW,EAAE,uBAHf;AAIEC,cAAAA,WAAW,EAAE,CAJf;AAKEC,cAAAA,IAAI,EAAE;AALR,aADQ;AAFiB,WAA7B;AAYD,SAbD;AAcArB,QAAAA,YAAY,CAACY,eAAD,CAAZ;AACD,OAjCD,MAiCO;AACLU,QAAAA,OAAO,CAACC,KAAR,CAAc,gCAAd;AACD;AACF,KA1CH,EA2CGC,KA3CH,CA2CUD,KAAD,IAAW;AAChBD,MAAAA,OAAO,CAACC,KAAR,CAAc,sBAAd,EAAsCA,KAAtC;AACD,KA7CH;AA8CD,GA/CQ,EA+CN,EA/CM,CAAT;AAiDA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGf,MAAM,CAACC,IAAP,CAAYZ,SAAZ,EAAuBkB,GAAvB,CAA4BF,SAAD,iBAC1B;AAAA,8BACE;AAAA,kBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AAAO,QAAA,SAAS,EAAEd,SAAS,CAACc,SAAD;AAA3B;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,OAAUA,SAAV;AAAA;AAAA;AAAA;AAAA,YADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAhED;;GAAMjB,S;;KAAAA,S;AAkEN,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Chart from \"./Chart\";\n\nconst CrimeData = () => {\n  const [crimeData, setCrimeData] = useState({});\n  const [chartData, setChartData] = useState({});\n\n  useEffect(() => {\n    axios\n      .get(\n        \"https://api.usa.gov/crime/fbi/cde/arrest/state/AK/all?from=2015&to=2020&API_KEY=iiHnOKfno2Mgkt5AynpvPpUQTEyxE77jo1RU8PIv\"\n      )\n      .then((response) => {\n        const data = response.data.data;\n        if (data) {\n          const crimeDataByType = {};\n\n          data.forEach((entry) => {\n            Object.keys(entry).forEach((key) => {\n              if (key !== \"data_year\") {\n                if (!crimeDataByType[key]) {\n                  crimeDataByType[key] = [];\n                }\n                crimeDataByType[key].push(entry[key]);\n              }\n            });\n          });\n\n          setCrimeData(crimeDataByType);\n\n          // Create chart data and options for each crime type\n          const chartDataByType = {};\n          Object.keys(crimeDataByType).forEach((crimeType) => {\n            chartDataByType[crimeType] = {\n              labels: data.map((entry) => entry.data_year),\n              datasets: [\n                {\n                  label: crimeType,\n                  data: crimeDataByType[crimeType],\n                  borderColor: \"rgba(75, 192, 192, 1)\",\n                  borderWidth: 1,\n                  fill: false,\n                },\n              ],\n            };\n          });\n          setChartData(chartDataByType);\n        } else {\n          console.error(\"No data found in the response.\");\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n      });\n  }, []);\n\n  return (\n    <div>\n      <h1>Crime Data</h1>\n      {Object.keys(crimeData).map((crimeType) => (\n        <div key={crimeType}>\n          <h2>{crimeType}</h2>\n          <Chart chartData={chartData[crimeType]} />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default CrimeData;\n"]},"metadata":{},"sourceType":"module"}